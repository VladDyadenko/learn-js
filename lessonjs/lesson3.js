// const arr = [1, 2, , 4, , 6];
// // console.log(arr)
// arr[2] = undefined;
// arr[4] = undefined;
// console.log(arr)

// const indexOfEmptyElements = [];

// for (let i = 0; i < arr.length; i +=1) {

//   if (typeof arr[i] === "undefined") {
    
//     indexOfEmptyElements.push(i);

//   }
  
// }
// console.log(indexOfEmptyElements);

// ------------------







// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é getExtremeElements(array), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –æ–¥–∏–Ω
// –ø–∞—Ä–∞–º–µ—Ç—Ä array - –º–∞—Å–∏–≤ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–æ–≤—ñ–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏.
// –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –º–∞—Å–∏–≤ –∑ –¥–≤–æ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ - –ø–µ—Ä—à–æ–≥–æ —ñ
// –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ array.
// getExtremeElements([1, 2, 3, 4, 5]);
// getExtremeElements(["Earth", "Mars", "Venus"]);
// // –ø–æ–≤–µ—Ä—Ç–∞—î[1, 5]
// function getExtremeElements(array) {
//   // Change code below this line
//     return console.log([(array[0]), (array[array.length - 1])]);
    
//   // Change code above this line
// }

// function calculateEngravingPrice(message, pricePerWord) {
//    // Change code below this line
    
//  const countWord = console.log((+(message.split(" ")).length)*pricePerWord);
//     return countWord;


//    // Change code above this line
// }
// calculateEngravingPrice("JavaScript is in my blood", 10);
// calculateEngravingPrice("JavaScript is in my blood", 20);
// calculateEngravingPrice("Web-development is creative work", 40);
// calculateEngravingPrice("Web-development is creative work", 20);

// function makeStringFromArray(array, delimiter) {
//   let string;
//   // Change code below this line
//     string = console.log(array.join(delimiter));


//   // Change code above this line
//   return string;
// }
// makeStringFromArray(["Mango", "hurries", "to", "the", "train"], " ");

// function slugify(title) {
//   // Change code below this line
    
//     const caseTitle = title.toLowerCase().replaceAll(" ", "-");
    
//     console.log(caseTitle);
//     // console.log(slugTitle);
    
    

   

//   // Change code above this line
// }
// slugify("Arrays for begginers");
// slugify("English for developer");
// slugify("How to become a JUNIOR developer in TWO WEEKS");


// const fruits = ['apple', 'plum', 'pear', 'orange', 'banana'];

// // Change code below this line
// const firstTwoEls = fruits.slice(0, 2) ;
// console.log("üöÄ ~ file: lesson3.js ~ line 65 ~ firstTwoEls", firstTwoEls)
// const nonExtremeEls = fruits.slice(1, fruits.length-1) ;
// console.log(nonExtremeEls)
// const lastThreeEls = fruits.slice(-3) ;
// console.log("üöÄ ~ file: lesson3.js ~ line 69 ~ lastThreeEls", lastThreeEls)
// ---------------------- 16/32 ------------------------------
// function makeArray(firstArray, secondArray, maxLength) {
//     // Change code below this line
//     let lengthArray = firstArray.length + secondArray.length;
//     console.log(lengthArray);

//     if (lengthArray <= maxLength) {
//         let allArray = firstArray.concat(secondArray);
//         console.log(allArray);
//         return allArray;
        
//     } else {
//         allArray = firstArray.concat(secondArray);
//         let maxAllArray = allArray.slice(0, maxLength);
//         console.log(maxAllArray);
//         return maxAllArray;
        
//     }
//     // Change code above this line
// }
// makeArray(["Mango", "Poly"], ["Ajax", "Chelsea"], 3);
// makeArray(["Mango", "Poly", "Houston"], ["Ajax", "Chelsea"], 4);
// makeArray(["Mango"], ["Ajax", "Chelsea", "Poly", "Houston"], 3);
// makeArray(["Earth", "Jupiter"], ["Neptune", "Uranus"], 2);
// makeArray(["Earth", "Jupiter"], ["Neptune", "Uranus"], 4);
// makeArray(["Earth", "Jupiter"], ["Neptune", "Uranus", "Venus"], 0);

// ------------------------ 17/32------------------------------
// –î–æ–ø–æ–≤–Ω–∏ —Ü–∏–∫–ª for —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤—ñ–Ω –ª–æ–≥—É–≤–∞–≤ –≤—Å—ñ —Ü—ñ–ª—ñ —á–∏—Å–ª–∞ –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ
//  –≤—ñ–¥ start –¥–æ end –≤–∫–ª—é—á–Ω–æ.
// const start = 3;
// const end = 7;

// for (let i = start; i <= end ; i += 1 ) { // Change this line
//   console.log(i);
// }

// ---------------------18/32 ---------------------
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é calculateTotal(number), —è–∫–∞ –ø—Ä–∏–π–º–∞—î —Ü—ñ–ª–µ —á–∏—Å–ª–æ
// (–ø–∞—Ä–∞–º–µ—Ç—Ä number) —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Å—É–º—É –≤—Å—ñ—Ö —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª –≤—ñ–¥ –æ–¥–∏–Ω–∏—Ü—ñ
// —ñ –¥–æ —Ü—å–æ–≥–æ —á–∏—Å–ª–∞.–ù–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ number –¥–æ—Ä—ñ–≤–Ω—é—î 3, —Ç–æ —Å—É–º–∞ - —Ü–µ
// 1 + 2 + 3, —Ç–æ–±—Ç–æ 6.

// function calculateTotal(number) {
//  // Change code below this line
//     let result = 0;
//     for (let i = 1; i <= number; i +=1) {
//         result += i;

//     }
//     console.log(result);
     
//   // Change code above this line
// }
// calculateTotal(7);

// ----------------- 19/32 --------------------
// –î–æ–ø–æ–≤–Ω–∏ –∫–æ–¥ —Ü–∏–∫–ª—É for —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤—ñ–Ω –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ –ª–æ–≥—É–≤–∞–≤
// —É—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É fruits.
// const fruits = ['apple', 'plum', 'pear', 'orange'];

// for (let i = 0; i < fruits.length; i +=1) { // Change this line
//   const fruit = fruits[i]; // Change this line
//   console.log(fruit);
// }

// --------------------- 20/32 -----------------------------
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é calculateTotalPrice(order), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –æ–¥–∏–Ω
// –ø–∞—Ä–∞–º–µ—Ç—Ä order - –º–∞—Å–∏–≤ —á–∏—Å–µ–ª, —ñ –æ–±—á–∏—Å–ª—é—î –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –π–æ–≥–æ
// –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏—Å—è —É –∑–º—ñ–Ω–Ω—ñ–π total,
//     —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —è–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–±–æ—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó.

// function calculateTotalPrice(order) {
//   let total = 0;
//   // Change code below this line
//     for (let i = 0; i < order.length; i += 1) {
//         total += order[i];
        
//     }
//     console.log(total);
//   // Change code above this line
//   return total;
// }
// calculateTotalPrice([12, 85, 37, 4]);

// ---------------------21/32 ------------------------
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é findLongestWord(string), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –¥–æ–≤—ñ–ª—å–Ω–∏–π —Ä—è–¥–æ–∫,
// —â–æ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –∑—ñ —Å–ª—ñ–≤, —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏—Ö
// –ø—Ä–æ–±—ñ–ª–æ–º(–ø–∞—Ä–∞–º–µ—Ç—Ä string), —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–π–¥–æ–≤—à–µ —Å–ª–æ–≤–æ –≤ —Ü—å–æ–º—É —Ä—è–¥–∫—É.

// function findLongestWord(string) {
//   // Change code below this line

//     return string.split(' ').reduce((a, b) => (b.length > a.length) ? b : a);
    
//       // Change code above this line
// }
// console.log(findLongestWord("The quick brown fox jumped over the lazy dog"));
// console.log(findLongestWord("Google do a roll"));
// console.log(findLongestWord(''));

// ---------------------- 22/32 -----------------------
// –î–æ–ø–æ–≤–Ω–∏ –∫–æ–¥ —Ñ—É–Ω–∫—Ü—ñ—ó createArrayOfNumbers(min, max) —Ç–∞–∫–∏–º —á–∏–Ω–æ–º,
// —â–æ–± –≤–æ–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ –º–∞—Å–∏–≤ —É—Å—ñ—Ö —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª –≤—ñ–¥ –∑–Ω–∞—á–µ–Ω–Ω—è min –¥–æ max.

// function createArrayOfNumbers(min, max) {
   

//   const numbers = [];
//   // Change code below this line
//     for (i = min; i <= max; i += 1) {
//          numbers.push(i);
           
//     }

//   // Change code above this line
//     console.log(numbers);
//   return numbers;
// }
// createArrayOfNumbers(1, 4);
// createArrayOfNumbers(14, 17);
// createArrayOfNumbers(29, 34);
// createArrayOfNumbers();

// ---------------------- 23/32 --------------------
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é filterArray(numbers, value),
// —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ —á–∏—Å–µ–ª(–ø–∞—Ä–∞–º–µ—Ç—Ä numbers) —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤,
// –≤ —è–∫–æ–º—É –±—É–¥—É—Ç—å —Ç—ñ–ª—å–∫–∏ —Ç—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É numbers, —è–∫—ñ
//  –±—ñ–ª—å—à—ñ –∑–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ value(—á–∏—Å–ª–æ).

// function filterArray(numbers, value) {
//    // Change code below this line
//     let result = [] ;

//     for (let i = 0; i < numbers.length; i += 1) {
                
//         if (numbers[i] > value) {
//             result.push(numbers[i]);
            
//         }
       
//     }
//     console.log(result);
//     return result;

//   // Change code above this line
// }
// filterArray([1, 2, 3, 4, 5], 3);
// filterArray([1, 2, 3, 4, 5], 4);
// filterArray([1, 2, 3, 4, 5], 5);
// filterArray([12, 24, 8, 41, 76], 38);
// filterArray([12, 24, 8, 41, 76], 20);
// filterArray();

// ------------------ 24/32 -----------------
// –§—É–Ω–∫—Ü—ñ—è checkFruit(fruit) –ø—Ä–∏–π–º–∞—î —Ä—è–¥–æ–∫ –∑ –Ω–∞–∑–≤–æ—é —Ñ—Ä—É–∫—Ç–∞
//     (–ø–∞—Ä–∞–º–µ—Ç—Ä fruit), —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ–π —Ç–∞–∫–∏–π —Ñ—Ä—É–∫—Ç –≤
//     –º–∞—Å–∏–≤—ñ fruits.

// –î–æ–ø–æ–≤–Ω–∏ –∫–æ–¥ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ —è–∫—â–æ:

// —Ñ—Ä—É–∫—Ç –ø—Ä–∏—Å—É—Ç–Ω—ñ–π –≤ –º–∞—Å–∏–≤—ñ, —Ç–æ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î true;
// —Ñ—Ä—É–∫—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –≤ –º–∞—Å–∏–≤—ñ, —Ç–æ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î false.
// function checkFruit(fruit) {
//   const fruits = ["apple", "plum", "pear", "orange"];

//   return fruits.includes(fruit); // Change this line
// }

// checkFruit("plum");

// ------------------------ 25/32 -----------------
// –°–ø—ñ–ª—å–Ω–∏–º–∏ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ –º–∞—Å–∏–≤—ñ–≤ –Ω–∞–∑–∏–≤–∞—é—Ç—å —Ç—ñ –µ–ª–µ–º–µ–Ω—Ç–∏,
// —è–∫—ñ –ø—Ä–∏—Å—É—Ç–Ω—ñ —É –≤—Å—ñ—Ö –º–∞—Å–∏–≤–∞—Ö.
// –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —É –¥–≤–æ—Ö –º–∞—Å–∏–≤–∞—Ö[1, 3, 5] —ñ[0, 8, 5, 3]
// —Å–ø—ñ–ª—å–Ω–∏–º–∏ –±—É–¥—É—Ç—å —á–∏—Å–ª–∞ 3 —ñ 5, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ –≤ –æ–±–æ—Ö
//  –≤–∏—Ö—ñ–¥–Ω–∏—Ö –º–∞—Å–∏–≤–∞—Ö.–ê —á–∏—Å–ª–∞ 0, 1 —ñ 8 –ø—Ä–∏—Å—É—Ç–Ω—ñ —Ç—ñ–ª—å–∫–∏ –≤ –æ–¥–Ω–æ–º—É –∑ –º–∞—Å–∏–≤—ñ–≤.
//  –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é getCommonElements(array1, array2),
// —è–∫–∞ –æ—Ç—Ä–∏–º—É—î –¥–≤–∞ –º–∞—Å–∏–≤–∏ –¥–æ–≤—ñ–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ array1 —ñ
// array2, —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, —â–æ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ —Ç–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤,
// —è–∫—ñ –ø—Ä–∏—Å—É—Ç–Ω—ñ –≤ –æ–±–æ—Ö –≤–∏—Ö—ñ–¥–Ω–∏—Ö –º–∞—Å–∏–≤–∞—Ö.

// function getCommonElements(array1, array2) {
//   // Change code below this line
//     let lengthArray1 = array1.length;
//     let lengthArray2 = array2.length;
//     let result =[];
    
//     if (lengthArray1 < lengthArray2) {

//         for (let i = 0; i < lengthArray1; i += 1) {
//             let a = array1[i];
//             let b = array2.includes(array1[i]);
//             if (b === true) {
//                 result.push(array1[i]);
//             }
            
//         }
        

//     } else {
//         for (let i = 0; i < lengthArray2; i += 1) {
//             let a = array2[i];
//             let b = array1.includes(array2[i]);
//             if (b === true) {
//                 result.push(array2[i]);
//             }
            
//         }
        
//     }
    
//     console.log(result);
//     return result;


//  // Change code above this line
// }
// getCommonElements([1, 2, 3], [2, 4]);
// getCommonElements([1, 2, 3], [2, 1, 17, 19]);
// getCommonElements([24, 12, 27, 3], [12, 8, 3, 36, 27]);
// getCommonElements([10, 20, 30, 40], [4, 30, 17, 10, 40]);
// getCommonElements([1, 2, 3], [10, 20, 30]);

// ---------------------26/32 ----------------------
// –í–∏–∫–æ–Ω–∞–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É —Ñ—É–Ω–∫—Ü—ñ—ó calculateTotalPrice(order),
//     –∑–∞–º—ñ–Ω–∏–≤—à–∏ —Ü–∏–∫–ª for –Ω–∞ for...of.


// function calculateTotalPrice(order) {
//   let total = 0;
//   // Change code below this line

//  for (const argument of order) {
//     total += argument;
//   }
//   console.log(total)
//   // Change code above this line
//   return total;
// }
// calculateTotalPrice([12, 85, 37, 4]);

// --------------------------27/32------------------
// –í–∏–∫–æ–Ω–∞–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ñ—É–Ω–∫—Ü—ñ—ó filterArray(numbers, value),
//     –∑–∞–º—ñ–Ω–∏–≤—à–∏ —Ü–∏–∫–ª for –Ω–∞ for...of.

// function filterArray(numbers, value) {
//   // Change code below this line
//   const filteredNumbers = [];

//   for (const argument of numbers) {
//     const number = argument;

//     if (number > value) {
//       filteredNumbers.push(number);
//     }
//   }
//     console.log(filteredNumbers);
//   return filteredNumbers;
//   // Change code above this line
// }
// filterArray([1, 2, 3, 4, 5], 3);

// --------------------29/32--------------
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é getEvenNumbers(start, end),
//     —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ —É—Å—ñ—Ö –ø–∞—Ä–Ω–∏—Ö —á–∏—Å–µ–ª –≤—ñ–¥ start –¥–æ end.
//     –ü–∞—Ä–Ω–∏–º –≤–≤–∞–∂–∞—î—Ç—å—Å—è —á–∏—Å–ª–æ, —è–∫–µ –¥—ñ–ª–∏—Ç—å—Å—è –Ω–∞ 2 –±–µ–∑
// –æ—Å—Ç–∞—á—ñ(10 % 2 === 0).

// function getEvenNumbers(start, end) {
//    // Change code below this line
//     let result = [];

//     for (let i = start; i <= end; i += 1){

//         if (i % 2 === 0) {
//             result.push(i);
//         }
//     }
//     console.log(result);
//     return result;


//     // Change code above this line
// }
// getEvenNumbers(2, 5);
// getEvenNumbers(3, 11);
// getEvenNumbers(6, 12);
// getEvenNumbers(8, 8);
// getEvenNumbers(7, 7);

// ----------------- 30/32 ---------------
// –û–≥–æ–ª–æ—à–µ–Ω–∞ –∑–º—ñ–Ω–Ω–∞ start –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º 6
// –û–≥–æ–ª–æ—à–µ–Ω–∞ –∑–º—ñ–Ω–Ω–∞ end –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º 27
// –û–≥–æ–ª–æ—à–µ–Ω–∞ –∑–º—ñ–Ω–Ω–∞ number –±–µ–∑ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
// –ü—ñ–¥—Å—É–º–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó number –¥–æ—Ä—ñ–≤–Ω—é—î 10
// –í —Ü–∏–∫–ª—ñ for –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è break –¥–ª—è –≤–∏—Ö–æ–¥—É –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
//  —É—Å—ñ—Ö —ñ—Ç–µ—Ä–∞—Ü—ñ–π —Ü–∏–∫–ª—É
// –î–æ–ø–æ–≤–Ω–∏ –∫–æ–¥ —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± —É –∑–º—ñ–Ω–Ω—É number –∑–∞–ø–∏—Å—É–≤–∞–ª–æ—Å—è
// –ø–µ—Ä—à–µ —á–∏—Å–ª–æ –≤—ñ–¥ start –¥–æ end, —è–∫–µ –¥—ñ–ª–∏—Ç—å—Å—è –Ω–∞ 5 –±–µ–∑ –æ—Å—Ç–∞—á—ñ.

// const start = 6;
// const end = 27;
// let number;

// for (let i = start; i < end; i += 1) {
//   if (i % 5 === 0) {
//       number = i;
      
//   }
// }

// ------------------------ 31/32 ---------------------

// function findNumber(start, end, divisor) {
//   // Change code below this line
// //   let number;

//   for (let i = start; i < end; i += 1) {
//     if (i % divisor === 0) {
//         console.log(i);
//         return i;
//     }
//   }
    
  
//   // Change code above this line
// }
// findNumber(2, 6, 5);
// findNumber(8, 17, 3);
// findNumber(6, 9, 4);
// findNumber(16, 35, 7);

// ---------------------- 32/32 ----------------------
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é includes(array, value), —è–∫–∞ —Ä–æ–±–∏—Ç—å —Ç–µ —Å–∞–º–µ,
//     —â–æ —ñ –º–µ—Ç–æ–¥ –º–∞—Å–∏–≤—É –º–∞—Å–∏–≤.includes(–∑–Ω–∞—á–µ–Ω–Ω—è) - –ø–µ—Ä–µ–≤—ñ—Ä—è—î,
//     —á–∏ –ø—Ä–∏—Å—É—Ç–Ω—î –≤ –º–∞—Å–∏–≤—ñ array –∑–Ω–∞—á–µ–Ω–Ω—è value, –ø–æ–≤–µ—Ä—Ç–∞—é—á–∏ true,
//         —è–∫—â–æ –ø—Ä–∏—Å—É—Ç–Ω—î, —ñ false –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.

// –ü—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ —Ü—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ —Ç—ñ–ª—ñ —Ñ—É–Ω–∫—Ü—ñ—ó includes()
//  –Ω–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –º–µ—Ç–æ–¥ –º–∞—Å–∏–≤.includes(–∑–Ω–∞—á–µ–Ω–Ω—è).

// function includes(array, value) {
//   // Change code below this line
//     let result;

//     for (let i = 0; i < array.length; i += 1) {
//       result = (value === array[i]);

//       if (result === true) {
//         console.log(result)
//         return result;
//       }
//     }
//     console.log(result)
//     return result;
       
//   // Change code above this line
   
// }

// includes([1, 2, 3, 4, 5], 3);
// includes([1, 2, 3, 4, 5], 17);
// includes(["Earth", "Mars", "Venus", "Jupiter", "Saturn"], "Jupiter");
// includes(["Earth", "Mars", "Venus", "Jupiter", "Saturn"], "Uranus");
// includes(["apple", "plum", "pear", "orange"], "plum");
// includes(["apple", "plum", "pear", "orange"], "kiwi");

// –ü—Ä–∏–º–µ—Ä 1 - –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Å—Å–∏–≤–æ–º
// –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –º–∞—Å—Å–∏–≤–æ–º genres –∑–Ω–∞—á–µ–Ω–∏–π ¬´–î–∂–∞–∑¬ª –∏ ¬´–ë–ª—é–∑¬ª.
// –î–æ–±–∞–≤—å—Ç–µ ¬´–†–æ–∫-–Ω-—Ä–æ–ª–ª¬ª –≤ –∫–æ–Ω–µ—Ü.
// –í–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞.
// –í—ã –≤–≤–æ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Å—Å–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç.
// –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –º–∞—Å—Å–∏–≤–Ω–æ–π –¥–æ–±—ã—á–∏.
// –£–¥–∞–ª–∏—Ç–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
// –í—Å—Ç–∞–≤—å—Ç–µ ¬´–ö–∞–Ω—Ç—Ä–∏¬ª –∏ ¬´–†–µ–≥–≥–∏¬ª –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞.

// const genres = [];
// console.log(genres);

// genres[0] = "–î–∂–∞–∑";
// genres[1] = "–ë–ª—é–∑";
// genres[genres.length] = "–†–æ–∫-–Ω-—Ä–æ–ª–ª";

// console.log(genres);
// console.log(genres[genres.length-1]);
// console.log(genres.splice(0, 1));
// console.log(genres.splice(0, 0, "–ö–∞–Ω—Ç—Ä–∏", "–†–µ–≥–≥–∏"));
// console.log(genres);

// –ü—Ä–∏–º–µ—Ä 2 - –ú–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏
// –ù–∞–ø–∏—à–∏ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏ –æ–ø—É—Ö–æ–ª–∏ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏,
//   –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ values –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫.–ó–Ω–∞—á–µ–Ω–∏—è
//  –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–±–µ–ª–æ–º.

// const values = '8 11';
// const stringValies = values.split(" ");
// const square = stringValies[0] * stringValies[1];

// console.log(square);

// –ü—Ä–∏–º–µ—Ä 3 - –ü–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞
// –ù–∞–ø–∏—à–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ fruits –º–∞—Å—Å–∏–≤–∞ for.
// –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ –≤—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ
// –Ω–æ–º–µ—Ä_—ç–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–∏–µ_—ç–ª–µ–º–µ–Ω—Ç–∞.–ù—É–º–µ—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è
//  —Å 1.

// const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];

// for (let i = 0; i < fruits.length; i +=1) {
//   console.log(`${i+1}: ${fruits[i]}`);
// }


// –ü—Ä–∏–º–µ—Ä 4 - –ú–∞—Å—Å–∏–≤—ã –∏ —Ü–∏–∫–ª—ã
// –ù–∞–ø–∏—à–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π
//  –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.–í –æ—Å–Ω–æ–≤–Ω–æ–º names –∏ phones —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è
//  –∏–º–µ–Ω–∞ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤—ã–π
//  –Ω–æ–º–µ—Ä –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è.
//  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ.

// const names = 'Jacob,William,Solomon,Artemis, Ivan';
// const phones = '89001234567,89001112233,890055566377,890055566300, 8900562522';

// const bookNames = names.split(",");
// console.log(bookNames);
// const bookPhons = phones.split(",");
// console.log(bookPhons);

// for (let i = 0; i < bookNames.length; i += 1) {
//   let phonsBook = `${bookNames[i]}: ${bookPhons[i]}`;
//   console.log(phonsBook)
// }

// –ü—Ä–∏–º–µ—Ä 5 - –ú–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏
// –ù–∞–ø–∏—à–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –ø–µ—Ä–≤–æ–≥–æ,
// –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ.–†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è
// –∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –ø—Ä–æ–±–µ–ª—å–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º.–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
// –¥–ª—è –ª—é–±–æ–π —Å—Ç—Ä–æ–∫–∏.

// const string = 'Welcome to the future';

// for (let i = 0; i < string.split(" ").length-1; i += 1) {
//   console.log(string.split(" ")[i]);
// }

// –ü—Ä–∏–º–µ—Ä 6 - –ú–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏
// –ù–∞–ø–∏—à–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π ¬´—Ä–∞–∑–±–∏—Ä–∞–µ—Ç¬ª —Å—Ç—Ä–æ–∫—É
// (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –±—É–∫–≤) –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–µ –≤ –∫–æ–Ω—Å–æ–ª—å.

// const string = 'Welcome to the future';
// console.log((string.split(" ")).reverse().join(" "));

// –ü—Ä–∏–º–µ—Ä 7 - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞ —Å —Ü–∏–∫–ª–æ–º
// –ù–∞–ø–∏—à–∏—Ç–µ —à–∞–±–ª–æ–Ω –º–∞—Å—Å–∏–≤–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å—Ç—Ä–æ–∫
//  –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø–æ –ø–µ—Ä–≤–æ–º—É –±—É–∫–≤–µ–Ω–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É.

// const langs = ['python', 'javascript', 'c++', 'haskel', 'php', 'ruby'];
// langs.sort()
// console.log( langs.sort())

// –ü—Ä–∏–º–µ—Ä 8. –≠–ª–µ–º–µ–Ω—Ç –ø–æ–∏—Å–∫–∞
// –ù–∞–ø–∏—à–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –ø–æ–∏—Å–∫–∞ —Å–∞–º–æ–≥–æ –º–∞–ª–æ–≥–æ —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤–µ.
//  –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –ª—é–±–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª.
//  –ò—Å–ø–æ–ª—å–∑—É–π —Ü–∏–∫–ª –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.

// const numbers = [20, 17, 94, 10, 23, 37, 50, 100];
// let min = numbers[0];

// for (let i = 0; i < numbers.length; i += 1) {
  
//   if (min > numbers[i]) {
//     min = numbers[i];
           
//   }
  
// }
// console.log(min)

// const a = function (...args) {
//   console.log(args);
//   let total = 0;

//   for (const arg of args) {
//     total += arg;
//   }
//   return total;
// }
// console.log(a(1, 2, 3, 4));
// console.log(a(1, 2, 3, 4, 5, 6, 7));

// ---------–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Å–µ–≤–¥–æ–º–∞—Å–∏–≤–∞ -------------------
// const filterNumbers = function (array, ...args) {
//   const uniqueEltments = [];

//   for (const element of array) {

//     if (args.includes(element)) {
//       uniqueEltments.push(element);
//       // console.log(uniqueEltments);
     
//     }
    
//   }
//   return uniqueEltments
// }
// console.log(filterNumbers([1, 30, 20, 15, 10], 15, 30, 50, 6, 20));

// –ü—Ä–∏–º–µ—Ä 1 - –ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞
// –ù–∞–ø–∏—à–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É, calcBMI(weight, height) –∫–æ—Ç–æ—Ä–∞—è
// –≤—ã—á–∏—Å–ª—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ —á–µ–ª–æ–≤–µ–∫–∞.
// –î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –≤–µ—Å –≤ –∫–∏–ª–ª–æ–≥—Ä–∞–º–º–∞—Ö –Ω–∞
// –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é –≤—ã—Å–æ—Ç—É —á–µ–ª–æ–≤–µ–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö.

// –í–µ—Å –∏ –≤—ã—Å–æ—Ç–∞ –±—É–¥—É—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏.
// –ù–µ—Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –≤–∏–¥–µ 24.7–∏–ª–∏ 24,7,
// —Ç–æ –µ—Å—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–ø—è—Ç–∞—è.

// –ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∫—Ä—É–≥–ª–∏—Ç—å –¥–æ –æ–¥–Ω–æ–π
//  —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π;

// const bmi = calcBMI('88,3', '1.75')

// const bmi = function (parametrs) {
//   let normaliseParametr = []

//   normaliseParametr.push(parametrs.replaceAll(",", "."));
//   console.log(normaliseParametr);
//   return normaliseParametr;
// }
 

// console.log(bmi); // 28.8
